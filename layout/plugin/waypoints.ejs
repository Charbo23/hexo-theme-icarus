<% if (head && plugin!==false) { %>
<%- _js(cdn('waypoints', '4.0.1', 'lib/noframework.waypoints.min.js'), true) %>
<script>
var before;
window.onload=function(){
  var action = throttle(navbarToggle);
  var waypoint = new Waypoint({
    element: document.getElementById('container'),
    handler: function(direction) {
      if(direction==="down"){
            before = $(window).scrollTop();
            document.getElementById('navbar-main').classList.remove("visible");
            $(window).on("scroll",action);
      }
      else if(direction==="up"){
        document.getElementById('navbar-main').classList.add("visible");
        before = $(window).scrollTop();
        //只解除绑定navbar的滚动监听
        $(window).off("scroll",action);
      }
    },
    offset: -100 
  });
  var waypoint2 = new Waypoint({
    element: document.getElementById('container'),
    handler: function(direction) {
      if(direction==="down"){
        document.getElementById('navbar-main').classList.remove("mobile-logo-visible");
        document.getElementById('navbar-main').classList.add("mobile-fix-bar");
      }
    },
    offset: 50 
  });
  var waypoint3 = new Waypoint({
    element: document.getElementById('container'),
    handler: function(direction) {
      if(direction==="up"){
        document.getElementById('navbar-main').classList.add("mobile-logo-visible");
        document.getElementById('navbar-main').classList.remove("mobile-fix-bar");    
      }
    },
    offset: 50 
  });
}
function navbarToggle(e){
  var cur = $(window).scrollTop();
  var diff = cur-before;
  //console.log(diff);
  if (diff>40) {
    before = cur;
    document.getElementById('navbar-main').classList.remove("visible");
    // console.log('下');
  }else if (diff<-70) {
    before = cur;
    document.getElementById('navbar-main').classList.add("visible");
    // console.log('上');
  }
}
function throttle(fn,wait) {
  wait = wait === undefined ? 300 : wait;
  var timer = null;
  //以下函数当scroll事件触发时执行
  return function (...args) {
    var context = this;
    if (!timer){
      timer = setTimeout(function(){
          fn.apply(context, args);    
          timer = null;
      }, wait);
    } 
  }
}

</script>
<% } %>
